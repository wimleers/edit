<?php

/**
 * Implements hook_menu()
 */
function edit_aloha_menu() {
  $items = array();
  $items['alohaeditor/lookup/%'] = array(
    'page callback'    => 'edit_aloha_link_lookup',
    'page arguments'   => array(2),
    'access arguments' => array('access content'),
    'type'             => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_library().
 */
function edit_aloha_library() {
  $library_path = libraries_get_path('alohaeditor');
  // It should not be possible to reach this hook without having Aloha Editor
  // properly setup in the first place, but an extra check does not hurt.
  if (empty($library_path)) {
    return;
  }
  if (file_exists($library_path . '/src')) {
    $library_path .= '/src';
  }
  else {
    // @todo Check whether this is correct.
    $library_path .= '/aloha';
  }

  // @TODO: update this based on the input format settings. However, Aloha does
  // not support multiple configurations and does not have a clear, unified way
  // to deal with a list of allowed tags, so we'll need to figure that out with
  // the Aloha Editor developers.
  $plugins_list = array(
    'list' => drupal_map_assoc(array(
      'common/ui',
      'common/align',
      'common/format',
      'common/list',
      'common/commands',
      'common/contenthandler',
      'common/paste',
      /*'common/link',
      'edit_aloha/drupal',*/
    )),
  );
  $plugins_activated = '';
  if ($plugins_list) {
    foreach ($plugins_list['list'] as $key => $plugin) {
      if ($plugin == $key && !$plugin == '0') {
        $plugins_activated .= $plugin . ',';
      }
    }
  }
  if (substr($plugins_activated, -1) == ',') {
    $plugins_activated = substr($plugins_activated, 0, -1);
  }

  $plugin_path = drupal_get_path('module', 'edit_aloha') . '/aloha/drupal-ui';
  $aloha_settings = array(
    'baseUrl' => file_create_url($library_path . '/lib'),
    'requireConfig' => array(
      'paths' => array(
        'ui/ui-plugin'  => file_create_url($plugin_path . '/lib/ui-plugin'),
        'ui/multiSplit' => file_create_url($plugin_path . '/lib/multiSplit'),
      )
    ),
    'plugins' => array(
      'load' => $plugins_activated,
      'format' => array('config' => array('strong', 'em', 'p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'pre', 'removeFormat')),
      'list' => array('config' => array('ul', 'ol')),
      'block' => array('sidebarAttributeEditor' => FALSE),
    ),
    'bundles' => array('edit_aloha' => '../../../../../../' . drupal_get_path('module', 'edit') . '/edit_aloha/aloha/'), // @todo maybe don't use bundles feature
    'contentHandler' => array( 'insertHtml' => array('word', 'generic', 'drupal'),
                              'handler' => array( 'generic' => array('transformFormattings' => false))),
    'sidebar' => array('disabled' => TRUE),
  );

  // Edit integration (".edit").
  $libraries['edit_aloha.edit'] = array(
    'title' => 'Edit: Aloha Editor integration',
    'website' => 'http://drupal.org/project/edit',
    'version' => NULL, // @TODO Figure out the correct way to do this.
    'js' => array(
      drupal_get_path('module', 'edit_aloha') . '/js/edit_aloha.js' => array(
        'defer' => TRUE,
        'weight' => 100,
      ),
      // Configure Edit's JS to use edit_aloha as the WYSIWYG.
      array(
        'data' => array('edit' => array(
          'wysiwyg' => 'edit_aloha',
          'settings' => $aloha_settings,
        )),
        'type' => 'setting',
      ),
    ),
    'dependencies' => array(
      array('edit_aloha', 'edit_aloha.wysiwyg'),
    ),
  );

  // The WYSIWYG files themselves (".wysiwyg").
  $libraries['edit_aloha.wysiwyg'] = array(
    'title' => 'Edit: Aloha Editor',
    'website' => 'http://aloha-editor.org/',
    'version' => NULL, // @TODO Figure out the correct way to do this.
    'js' => array(
      $library_path . '/lib/require.js' => array(
        'group' => JS_LIBRARY,
        'weight' => -1001,
        'defer' => TRUE,
      ),
      $library_path . '/lib/aloha.js' => array(
        'group' => JS_LIBRARY,
        'weight' => -1000,
        'defer' => TRUE,
        'attributes' => array(
            'data-aloha-defer-init' => 'true'
        ),
      ),
    ),
    'css' => array(
      $library_path . '/css/aloha.css',
      drupal_get_path('module', 'edit_aloha') . '/css/edit_aloha.css',
    ),
  );

  $plugin_default = array(
    'title' => 'Aloha Plugin',
    'version' => 'x',
    'dependencies' => array(
      array('edit_aloha', 'aloha'),
    ),
  );

  // @todo reference all the plugins.
  $common_path = $library_path . '/plugins/common';
  // Plugin registration
  $libraries['aloha.common.abbr'] = array(
    'js' => array($common_path . '/abbr/lib/abbr.js' => array('defer' => TRUE)),
  ) + $plugin_default;

  return $libraries;
}

// @TODO: use this + refactor
function _edit_wysiwyg_tag_to_aloha_plugin($tag) {
  // format plugin
  $format_plugin_tags = array(
    'strong', 'em', 'p', 'sub', 'sup', 'del', 'title',
    'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'pre'
  );
  if (in_array($tag, $format_plugin_tags)) {
    return 'format';
  }
  // list plugin (not explicitly present in Aloha: li)
  if (in_array($tag, array('ul', 'ol', 'li'))) {
    return 'list';
  }
  // table plugin (not explicitly present in Aloha: td, tr, thead, tbody)
  if (in_array($tag, array('table', 'td', 'tr', 'thead', 'tbody'))) {
    return 'table';
  }

  return FALSE;
}

/**
 * Page callback; Drupal link repository look-up.
 */
function edit_aloha_link_lookup($lookup = false) {
  $lookup = check_plain($lookup);

  $search_results = node_search_execute($lookup);

  if (is_array($search_results) && empty($search_results[0])) {
    $search_results = false;
  }

  if (is_array($search_results)) {
    $json = array();
    foreach ($search_results as $result) {
      $json[] = array('u' => $result['link'], 't' => $result['title'], 's' => $result['score']);
    }
    print drupal_json_encode($json);
    exit;
  }
}
